{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Controle de estoque de almoxarifado Banco de Dados Modelo de entidade relacionamento Modelo relacional Diagrama de classes Telas Tela Geral Tela de Estoque Tela de Usuario Tela de Produto","title":"Inicio"},{"location":"#controle-de-estoque-de-almoxarifado","text":"","title":"Controle de estoque de almoxarifado"},{"location":"#banco-de-dados","text":"","title":"Banco de Dados"},{"location":"#modelo-de-entidade-relacionamento","text":"","title":"Modelo de entidade relacionamento"},{"location":"#modelo-relacional","text":"","title":"Modelo relacional"},{"location":"#diagrama-de-classes","text":"","title":"Diagrama de classes"},{"location":"#telas","text":"Tela Geral Tela de Estoque Tela de Usuario Tela de Produto","title":"Telas"},{"location":"banco_dados/","text":"Banco de dados Foi utilizado o modelo relacional SGBD PostgreSQL para a cria\u00e7\u00e3o do banco, constam tres tabelas principais, produto, solicitante e fornecedor, e mais as tabelas de relacionamento entre elas. A conex\u00e3o com o banco foi feita pelo psycopg2 modulo de python. Codigo de conex\u00e3o class BD(): #database = 'clientes.db' database = 'Projeto_integrador' dbuser='postgres' dbhost='localhost' dbpassword='postgres' conn = None cur = None conectado = False def conectar(self): self.conn = sql.connect(dbname=self.database, user=self.dbuser, host=self.dbhost, password=self.dbpassword) self.cur = self.conn.cursor() self.conectado = True def desconectar(self): self.conn.close() self.conectado = False def executar(self, sql, parms = None): if self.conectado: if parms == None: self.cur.execute(sql) else: self.cur.execute(sql, parms) return True else: return False def fetchall(self): return self.cur.fetchall() def persistir(self): if self.conectado: self.conn.commit() return True else: return False","title":"Banco de Dados"},{"location":"banco_dados/#banco-de-dados","text":"Foi utilizado o modelo relacional SGBD PostgreSQL para a cria\u00e7\u00e3o do banco, constam tres tabelas principais, produto, solicitante e fornecedor, e mais as tabelas de relacionamento entre elas. A conex\u00e3o com o banco foi feita pelo psycopg2 modulo de python.","title":"Banco de dados"},{"location":"banco_dados/#codigo-de-conexao","text":"class BD(): #database = 'clientes.db' database = 'Projeto_integrador' dbuser='postgres' dbhost='localhost' dbpassword='postgres' conn = None cur = None conectado = False def conectar(self): self.conn = sql.connect(dbname=self.database, user=self.dbuser, host=self.dbhost, password=self.dbpassword) self.cur = self.conn.cursor() self.conectado = True def desconectar(self): self.conn.close() self.conectado = False def executar(self, sql, parms = None): if self.conectado: if parms == None: self.cur.execute(sql) else: self.cur.execute(sql, parms) return True else: return False def fetchall(self): return self.cur.fetchall() def persistir(self): if self.conectado: self.conn.commit() return True else: return False","title":"Codigo de conex\u00e3o"},{"location":"estoque/","text":"Tela de estoque Pode-se vizualizar o estoque dos produtos. class HUD_estoque(Toplevel): def __init__(self): Toplevel.__init__(self) #self.janela_estoque = Tk() #self.janela_estoque = Toplevel() self.wm_title(\"Estoque\") elf.geometry(\"300x300\") self.puxar_estoque = str(estoque_geral()) print(self.puxar_estoque) self.puxar_estoque_2 = (self.puxar_estoque.replace(\" \",\"\")) self.scroll_produtos = Scrollbar(self) self.list_produtos = Listbox(self, width=47, height=100,selectmode=SINGLE,yscrollcommand=self.scroll_produtos) self.list_produtos.insert(1,self.puxar_estoque_2) self.list_produtos.pack(side=LEFT) self.scroll_produtos.pack(side=RIGHT)","title":"Estoque"},{"location":"estoque/#tela-de-estoque","text":"Pode-se vizualizar o estoque dos produtos. class HUD_estoque(Toplevel): def __init__(self): Toplevel.__init__(self) #self.janela_estoque = Tk() #self.janela_estoque = Toplevel() self.wm_title(\"Estoque\") elf.geometry(\"300x300\") self.puxar_estoque = str(estoque_geral()) print(self.puxar_estoque) self.puxar_estoque_2 = (self.puxar_estoque.replace(\" \",\"\")) self.scroll_produtos = Scrollbar(self) self.list_produtos = Listbox(self, width=47, height=100,selectmode=SINGLE,yscrollcommand=self.scroll_produtos) self.list_produtos.insert(1,self.puxar_estoque_2) self.list_produtos.pack(side=LEFT) self.scroll_produtos.pack(side=RIGHT)","title":"Tela de estoque"},{"location":"geral/","text":"Tela geral A tela principal, por ela podemos ter acesso todas as outras telas, consiste em uma tela com tres botoes um bot\u00e3o para acessar o estoque total, outro para tela de usu\u00e1rios, e mais um para a tela de produtos.","title":"Geral"},{"location":"geral/#tela-geral","text":"A tela principal, por ela podemos ter acesso todas as outras telas, consiste em uma tela com tres botoes um bot\u00e3o para acessar o estoque total, outro para tela de usu\u00e1rios, e mais um para a tela de produtos.","title":"Tela geral"},{"location":"produtos/","text":"Tela de Produtos Na tela de produtos \u00e9 o lugar do projeto em que podemos visualizar, deletar, inserir, alterar e observar os produtos. Tem conex\u00e3o direta com o banco de dados e exibe ao lado direito da tela o estoque de produtos. C\u00f3digo class HUD_produto(Toplevel): def __init__(self,codigo_produto=0,marca=\"\",quantidade=0,custo=0): Toplevel.__init__(self) #janela_produto = Tk() #janela_produto.wm_title(\"Entrada e Saida de Produtos\") self.txt_codigo = StringVar() self.txt_marca = StringVar() self.txt_quantidade = IntVar() self.txt_custo = IntVar() self.lbl_codigo = Label(self, text=\"C\u00f3digo do produto\") self.lbl_marca = Label(self, text=\"Marca\") self.lbl_quantidade = Label(self, text=\"Quantidade\") self.lbl_custo = Label(self, text=\"Custo unit\u00e1rio\") self.ent_codigo = Entry(self, textvariable=self.txt_codigo) self.ent_marca = Entry(self, textvariable=self.txt_marca) self.ent_quantidade = Entry(self, textvariable=self.txt_quantidade) self.ent_custo = Entry(self, textvariable=self.txt_custo) self.puxar_estoque = str(estoque_geral()) self.puxar_estoque_2 = self.puxar_estoque.replace(\" \",\"\") self.list_produto = Listbox(self) self.list_produto.insert(1,self.puxar_estoque_2) self.scroll_clientes = Scrollbar(self) self.btn_retirar = Button(self, text=\"Retirar Produto\") self.btn_devolver = Button(self, text=\"inserir produto\",command=inserir_produto) self.btn_visualizar = Button(self, text=\"Visualizar Estoque\") self.btn_atualizar = Button(self, text=\"atualizar\") self.btn_apagar = Button(self, text=\"apagar\") self.btn_fechar = Button(self, text=\"fechar\") self.lbl_codigo.grid(row=0, column=0) self.lbl_marca.grid(row=1,column=0) self.lbl_quantidade.grid(row=2,column=0) self.lbl_custo.grid(row=3,column=0) self.ent_codigo.grid(row=0,column=1,padx=50,pady=50) self.ent_marca.grid(row=1,column=1) self.ent_quantidade.grid(row=2,column=1) self.ent_custo.grid(row=3, column=1) self.list_produto.grid(row=0, column=2, rowspan=10) self.scroll_clientes.grid(row=0, column=6, rowspan= 10) self.btn_retirar.grid(row=5, column=0,columnspan=2) self.btn_devolver.grid(row=4, column=0,columnspan=2) self.btn_visualizar.grid(row=6, column=0,columnspan=2) self. btn_atualizar.grid(row=7, column=0,columnspan=2) self.btn_apagar.grid(row=8, column=0,columnspan=2) self.btn_fechar.grid(row=9, column=0,columnspan=2) x_pad = 5 y_pad = 3 width_entry = 30 for child in self.winfo_children(): widget_class = child.__class__.__name__ if widget_class == \"Button\": child.grid_configure(sticky=\"WE\", padx=x_pad, pady= y_pad) elif widget_class == \"Listblox\": child.grid_configure(sticky=\"NS\", padx=x_pad, pady= y_pad) elif widget_class == \"Scrollbar\": child.grid_configure(sticky=\"NS\", padx=x_pad, pady= y_pad) else: child.grid_configure(sticky=\"NS\", padx=x_pad, pady= y_pad)","title":"Produtos"},{"location":"produtos/#tela-de-produtos","text":"Na tela de produtos \u00e9 o lugar do projeto em que podemos visualizar, deletar, inserir, alterar e observar os produtos. Tem conex\u00e3o direta com o banco de dados e exibe ao lado direito da tela o estoque de produtos.","title":"Tela de Produtos"},{"location":"produtos/#codigo","text":"class HUD_produto(Toplevel): def __init__(self,codigo_produto=0,marca=\"\",quantidade=0,custo=0): Toplevel.__init__(self) #janela_produto = Tk() #janela_produto.wm_title(\"Entrada e Saida de Produtos\") self.txt_codigo = StringVar() self.txt_marca = StringVar() self.txt_quantidade = IntVar() self.txt_custo = IntVar() self.lbl_codigo = Label(self, text=\"C\u00f3digo do produto\") self.lbl_marca = Label(self, text=\"Marca\") self.lbl_quantidade = Label(self, text=\"Quantidade\") self.lbl_custo = Label(self, text=\"Custo unit\u00e1rio\") self.ent_codigo = Entry(self, textvariable=self.txt_codigo) self.ent_marca = Entry(self, textvariable=self.txt_marca) self.ent_quantidade = Entry(self, textvariable=self.txt_quantidade) self.ent_custo = Entry(self, textvariable=self.txt_custo) self.puxar_estoque = str(estoque_geral()) self.puxar_estoque_2 = self.puxar_estoque.replace(\" \",\"\") self.list_produto = Listbox(self) self.list_produto.insert(1,self.puxar_estoque_2) self.scroll_clientes = Scrollbar(self) self.btn_retirar = Button(self, text=\"Retirar Produto\") self.btn_devolver = Button(self, text=\"inserir produto\",command=inserir_produto) self.btn_visualizar = Button(self, text=\"Visualizar Estoque\") self.btn_atualizar = Button(self, text=\"atualizar\") self.btn_apagar = Button(self, text=\"apagar\") self.btn_fechar = Button(self, text=\"fechar\") self.lbl_codigo.grid(row=0, column=0) self.lbl_marca.grid(row=1,column=0) self.lbl_quantidade.grid(row=2,column=0) self.lbl_custo.grid(row=3,column=0) self.ent_codigo.grid(row=0,column=1,padx=50,pady=50) self.ent_marca.grid(row=1,column=1) self.ent_quantidade.grid(row=2,column=1) self.ent_custo.grid(row=3, column=1) self.list_produto.grid(row=0, column=2, rowspan=10) self.scroll_clientes.grid(row=0, column=6, rowspan= 10) self.btn_retirar.grid(row=5, column=0,columnspan=2) self.btn_devolver.grid(row=4, column=0,columnspan=2) self.btn_visualizar.grid(row=6, column=0,columnspan=2) self. btn_atualizar.grid(row=7, column=0,columnspan=2) self.btn_apagar.grid(row=8, column=0,columnspan=2) self.btn_fechar.grid(row=9, column=0,columnspan=2) x_pad = 5 y_pad = 3 width_entry = 30 for child in self.winfo_children(): widget_class = child.__class__.__name__ if widget_class == \"Button\": child.grid_configure(sticky=\"WE\", padx=x_pad, pady= y_pad) elif widget_class == \"Listblox\": child.grid_configure(sticky=\"NS\", padx=x_pad, pady= y_pad) elif widget_class == \"Scrollbar\": child.grid_configure(sticky=\"NS\", padx=x_pad, pady= y_pad) else: child.grid_configure(sticky=\"NS\", padx=x_pad, pady= y_pad)","title":"C\u00f3digo"},{"location":"usuarios/","text":"Tela de usu\u00e1rios Na tela de usu\u00e1rios podemos listar, buscar, inserir, atualizar e apagar usuarios do banco de dados. C\u00f3digo class HUD_usuario(Toplevel): def __init__(self): Toplevel.__init__(self) #_usuario = Tk() #_usuario.wm_title(\"Cadastro de Usu\u00e1rios\") self.txt_nome = StringVar() self.txt_sobrenome = StringVar() self.txt_email = StringVar() self.txt_cpf = StringVar() self.lbl_nome = Label(self, text=\"Nome\") self.lbl_sobrenome = Label(self, text=\"Sobrenome\") self.lbl_email = Label(self, text=\"Email\") self.lbl_cpf = Label(self, text=\"CPF\") self.ent_nome = Entry(self, textvariable=self.txt_nome) self.ent_sobrenome = Entry(self, textvariable=self.txt_sobrenome) self.ent_email = Entry(self, textvariable=self.txt_email) self.ent_cpf = Entry(self, textvariable=self.txt_cpf) self.puxar_usuario = str(lista_usuario_geral()) self.puxar_usuario_2 = (self.puxar_usuario.replace(\" \",\"\")) self.list_clientes = Listbox(self) self.list_clientes.insert(1, self.puxar_usuario_2) self.scroll_clientes = Scrollbar(self) self.btn_listar = Button(self, text=\"Listar\") self.btn_buscar = Button(self, text=\"Buscar\") self.btn_inserir = Button(self, text=\"Inserir\") self.btn_atualizar = Button(self, text=\"Atualizar\") self.btn_apagar = Button(self, text=\"Apagar\") #self.btn_fechar = Button(self, text=\"Fechar\") self.lbl_nome.grid(row=0, column=0) self.lbl_sobrenome.grid(row=1,column=0) self.lbl_email.grid(row=2,column=0) self.lbl_cpf.grid(row=3,column=0) self.ent_nome.grid(row=0,column=1,padx=50,pady=50) self.ent_sobrenome.grid(row=1,column=1) self.ent_email.grid(row=2,column=1) self.ent_cpf.grid(row=3, column=1) self.list_clientes.grid(row=0, column=2, rowspan=10) self.scroll_clientes.grid(row=0, column=6, rowspan= 10) self.btn_listar.grid(row=4, column=0,columnspan=2) self.btn_buscar.grid(row=5, column=0,columnspan=2) self.btn_inserir.grid(row=6, column=0,columnspan=2) self.btn_atualizar.grid(row=7, column=0,columnspan=2) self.btn_apagar.grid(row=8, column=0,columnspan=2) #self.btn_fechar.grid(row=9, column=0,columnspan=2) x_pad = 5 y_pad = 3 width_entry = 30 for child in self.winfo_children(): widget_class = child.__class__.__name__ if widget_class == \"Button\": child.grid_configure(sticky=\"WE\", padx=x_pad, pady= y_pad) elif widget_class == \"Listblox\": child.grid_configure(sticky=\"NS\", padx=x_pad, pady= y_pad) elif widget_class == \"Scrollbar\": child.grid_configure(sticky=\"NS\", padx=x_pad, pady= y_pad) else: child.grid_configure(sticky=\"NS\", padx=x_pad, pady= y_pad)","title":"Usu\u00e1rios"},{"location":"usuarios/#tela-de-usuarios","text":"Na tela de usu\u00e1rios podemos listar, buscar, inserir, atualizar e apagar usuarios do banco de dados.","title":"Tela de usu\u00e1rios"},{"location":"usuarios/#codigo","text":"class HUD_usuario(Toplevel): def __init__(self): Toplevel.__init__(self) #_usuario = Tk() #_usuario.wm_title(\"Cadastro de Usu\u00e1rios\") self.txt_nome = StringVar() self.txt_sobrenome = StringVar() self.txt_email = StringVar() self.txt_cpf = StringVar() self.lbl_nome = Label(self, text=\"Nome\") self.lbl_sobrenome = Label(self, text=\"Sobrenome\") self.lbl_email = Label(self, text=\"Email\") self.lbl_cpf = Label(self, text=\"CPF\") self.ent_nome = Entry(self, textvariable=self.txt_nome) self.ent_sobrenome = Entry(self, textvariable=self.txt_sobrenome) self.ent_email = Entry(self, textvariable=self.txt_email) self.ent_cpf = Entry(self, textvariable=self.txt_cpf) self.puxar_usuario = str(lista_usuario_geral()) self.puxar_usuario_2 = (self.puxar_usuario.replace(\" \",\"\")) self.list_clientes = Listbox(self) self.list_clientes.insert(1, self.puxar_usuario_2) self.scroll_clientes = Scrollbar(self) self.btn_listar = Button(self, text=\"Listar\") self.btn_buscar = Button(self, text=\"Buscar\") self.btn_inserir = Button(self, text=\"Inserir\") self.btn_atualizar = Button(self, text=\"Atualizar\") self.btn_apagar = Button(self, text=\"Apagar\") #self.btn_fechar = Button(self, text=\"Fechar\") self.lbl_nome.grid(row=0, column=0) self.lbl_sobrenome.grid(row=1,column=0) self.lbl_email.grid(row=2,column=0) self.lbl_cpf.grid(row=3,column=0) self.ent_nome.grid(row=0,column=1,padx=50,pady=50) self.ent_sobrenome.grid(row=1,column=1) self.ent_email.grid(row=2,column=1) self.ent_cpf.grid(row=3, column=1) self.list_clientes.grid(row=0, column=2, rowspan=10) self.scroll_clientes.grid(row=0, column=6, rowspan= 10) self.btn_listar.grid(row=4, column=0,columnspan=2) self.btn_buscar.grid(row=5, column=0,columnspan=2) self.btn_inserir.grid(row=6, column=0,columnspan=2) self.btn_atualizar.grid(row=7, column=0,columnspan=2) self.btn_apagar.grid(row=8, column=0,columnspan=2) #self.btn_fechar.grid(row=9, column=0,columnspan=2) x_pad = 5 y_pad = 3 width_entry = 30 for child in self.winfo_children(): widget_class = child.__class__.__name__ if widget_class == \"Button\": child.grid_configure(sticky=\"WE\", padx=x_pad, pady= y_pad) elif widget_class == \"Listblox\": child.grid_configure(sticky=\"NS\", padx=x_pad, pady= y_pad) elif widget_class == \"Scrollbar\": child.grid_configure(sticky=\"NS\", padx=x_pad, pady= y_pad) else: child.grid_configure(sticky=\"NS\", padx=x_pad, pady= y_pad)","title":"C\u00f3digo"}]}